{
  "address": "0x8bDA63810bD598B9719980c49167581fE90A24D1",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bridgeAssist",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "BridgeAssistAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bridgeAssist",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "BridgeAssistCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bridgeTransfer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bridgeMint",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bridgeNative",
          "type": "address"
        }
      ],
      "name": "BridgeAssistImplementationsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bridgeAssist",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "BridgeAssistRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADD_REMOVE_LIMIT_PER_TIME",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CREATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "bridges",
          "type": "address[]"
        }
      ],
      "name": "addBridgeAssists",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum BridgeFactoryUpgradeable.BridgeType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "bridgeAssistImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bridgeAssistTransferImplementation_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bridgeAssistMintImplementation_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bridgeAssistNativeImplementation_",
          "type": "address"
        }
      ],
      "name": "changeBridgeAssistImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum BridgeFactoryUpgradeable.BridgeType",
          "name": "bridgeType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "limitPerSend",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "feeWallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "feeSend",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "feeFulfill",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "relayers",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "relayerConsensusThreshold",
          "type": "uint256"
        }
      ],
      "name": "createBridgeAssist",
      "outputs": [
        {
          "internalType": "address",
          "name": "bridge",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getBridgeByToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "getBridgesByToken",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getBridgesByTokenLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getCreatedBridgeInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "bridgeAssist",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            }
          ],
          "internalType": "struct BridgeFactoryUpgradeable.BridgeAssistInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "getCreatedBridgesInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "bridgeAssist",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            }
          ],
          "internalType": "struct BridgeFactoryUpgradeable.BridgeAssistInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCreatedBridgesLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bridgeAssistTransferImplementation_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bridgeAssistMintImplementation_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bridgeAssistNativeImplementation_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "bridges",
          "type": "address[]"
        }
      ],
      "name": "removeBridgeAssists",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x62bfb6bfbff5c0fe22860a0511917d6e4b4b49dda94c8ef1171e71d63a558f88",
  "receipt": {
    "to": null,
    "from": "0x64579b9D8f8eED9a568Da0a93e93BC3D3a32F6fD",
    "contractAddress": "0x8bDA63810bD598B9719980c49167581fE90A24D1",
    "transactionIndex": 6,
    "gasUsed": "2040745",
    "logsBloom": "0x
    "blockHash": "0x918b2f6c239641247dd21971730343999a89522e1c884d7093fa65f2ba4572c6",
    "transactionHash": "0x62bfb6bfbff5c0fe22860a0511917d6e4b4b49dda94c8ef1171e71d63a558f88",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 10402079,
        "transactionHash": "0x62bfb6bfbff5c0fe22860a0511917d6e4b4b49dda94c8ef1171e71d63a558f88",
        "address": "0x8bDA63810bD598B9719980c49167581fE90A24D1",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 5,
        "blockHash": "0x918b2f6c239641247dd21971730343999a89522e1c884d7093fa65f2ba4572c6"
      }
    ],
    "blockNumber": 10402079,
    "cumulativeGasUsed": "2379815",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4002e5e254812c79856d5c5172ff683d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bridgeAssist\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BridgeAssistAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bridgeAssist\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BridgeAssistCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bridgeTransfer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bridgeMint\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bridgeNative\",\"type\":\"address\"}],\"name\":\"BridgeAssistImplementationsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bridgeAssist\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BridgeAssistRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADD_REMOVE_LIMIT_PER_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CREATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bridges\",\"type\":\"address[]\"}],\"name\":\"addBridgeAssists\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum BridgeFactoryUpgradeable.BridgeType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"bridgeAssistImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridgeAssistTransferImplementation_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridgeAssistMintImplementation_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridgeAssistNativeImplementation_\",\"type\":\"address\"}],\"name\":\"changeBridgeAssistImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum BridgeFactoryUpgradeable.BridgeType\",\"name\":\"bridgeType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitPerSend\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeSend\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeFulfill\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"relayers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"relayerConsensusThreshold\",\"type\":\"uint256\"}],\"name\":\"createBridgeAssist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getBridgeByToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getBridgesByToken\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getBridgesByTokenLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getCreatedBridgeInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"bridgeAssist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct BridgeFactoryUpgradeable.BridgeAssistInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getCreatedBridgesInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"bridgeAssist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct BridgeFactoryUpgradeable.BridgeAssistInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCreatedBridgesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridgeAssistTransferImplementation_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridgeAssistMintImplementation_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridgeAssistNativeImplementation_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bridges\",\"type\":\"address[]\"}],\"name\":\"removeBridgeAssists\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"gotbit\",\"details\":\"Creates BridgeAssists using the openzeppelin/Clones library\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"addBridgeAssists(address[])\":{\"details\":\"Third-party bridges interface must match the implementation bridge\",\"params\":{\"bridges\":\"Bridge addresses to add\"}},\"changeBridgeAssistImplementation(address,address,address)\":{\"details\":\"Changes the implementation address for future proxy bridges\",\"params\":{\"bridgeAssistMintImplementation_\":\"New mint bridge implementaion address\",\"bridgeAssistNativeImplementation_\":\"New native bridge implementaion address\",\"bridgeAssistTransferImplementation_\":\"New transfer bridge implementaion address\"}},\"createBridgeAssist(uint8,address,uint256,address,uint256,uint256,address,address[],uint256)\":{\"params\":{\"bridgeType\":\"0 - MINT, 1 - NATIVE\",\"feeFulfill\":\"Fee numerator (fulfill)\",\"feeSend\":\"Fee numerator (send) (not used if NATIVE)\",\"feeWallet\":\"Platform fee wallet\",\"limitPerSend\":\"Limit per one send (not used if NATIVE)\",\"owner\":\"Bridge DEFAULT_ADMIN_ROLE holder\",\"relayerConsensusThreshold\":\"Number of signers required to complete a transaction\",\"relayers\":\"Backend signers\",\"token\":\"Supported token to send (not used if NATIVE)\"}},\"getBridgeByToken(address,uint256)\":{\"params\":{\"index\":\"Bridge index to get Requirements: {index} must be less than or equal to {getBridgesByTokenLength}.\",\"token\":\"Token address\"}},\"getBridgesByToken(address,uint256,uint256)\":{\"params\":{\"limit\":\"Return size limit Requirements: {offset} + {limit} must be less than or equal to {getBridgesByTokenLength}.\",\"offset\":\"Offset to start with\",\"token\":\"Token address\"}},\"getBridgesByTokenLength(address)\":{\"params\":{\"token\":\"Token address\"}},\"getCreatedBridgeInfo(uint256)\":{\"params\":{\"index\":\"Bridge index to get Requirements: {index} must be less than {getCreatedBridgesLength}.\"}},\"getCreatedBridgesInfo(uint256,uint256)\":{\"params\":{\"limit\":\"Return size limit Requirements: {offset} + {limit} must be less than or equal to {getCreatedBridgesLength}.\",\"offset\":\"Offset to start with\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address,address,address)\":{\"params\":{\"bridgeAssistMintImplementation_\":\"BridgeAssistMint implementation\",\"bridgeAssistNativeImplementation_\":\"BridgeAssistNative implementation\",\"bridgeAssistTransferImplementation_\":\"BridgeAssistTransfer implementation\",\"owner\":\"DEFAULT_ADMIN_ROLE holder\"}},\"removeBridgeAssists(address[])\":{\"params\":{\"bridges\":\"Bridge addresses to remove\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"title\":\"BridgeFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addBridgeAssists(address[])\":{\"notice\":\"Allows to add third-party bridges to the stored list\"},\"changeBridgeAssistImplementation(address,address,address)\":{\"notice\":\"Allows to change template for creating new bridges\"},\"createBridgeAssist(uint8,address,uint256,address,uint256,uint256,address,address[],uint256)\":{\"notice\":\"Creates new BridgeAssist contract\"},\"getBridgeByToken(address,uint256)\":{\"notice\":\"Gets bridge address by token address\"},\"getBridgesByToken(address,uint256,uint256)\":{\"notice\":\"Gets list of bridge addresses by token address\"},\"getBridgesByTokenLength(address)\":{\"notice\":\"Gets the number of created bridges for the specified token\"},\"getCreatedBridgeInfo(uint256)\":{\"notice\":\"Gets created bridge info by index\"},\"getCreatedBridgesInfo(uint256,uint256)\":{\"notice\":\"Gets created bridges info\"},\"getCreatedBridgesLength()\":{\"notice\":\"Gets the number of created bridges\"},\"initialize(address,address,address,address)\":{\"notice\":\"Initializes the BridgeFactory contract.\"},\"removeBridgeAssists(address[])\":{\"notice\":\"Allows to remove bridges from the stored list\"}},\"notice\":\"Contract for creating BridgeAssist contracts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BridgeFactoryUpgradeable.sol\":\"BridgeFactoryUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc8710577334e8d0799ae2b2a731b1924a7bddd64319da9787ddd2dc69bdd1ce5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary ClonesUpgradeable {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x3d98edeb5d5be8410fca707b73dabe7544d1dd11e35b73dd907c473fe43cc3ae\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xd90d7723512df65ae417adaf0801042940f0dabd60039ceeaffe34aa5b238da1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x1c65595a26548a1b2263315b08a56334a2d7087319814437559c3c96025e939f\",\"license\":\"MIT\"},\"contracts/BridgeFactoryUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {IBridgeAssist} from './interfaces/IBridgeAssist.sol';\\nimport {AccessControlUpgradeable} from '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\n\\nimport {ClonesUpgradeable} from '@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol';\\nimport {EnumerableSetUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol';\\nimport {StringsUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol';\\n\\n/**\\n * @title BridgeFactory\\n * @author gotbit\\n * @notice Contract for creating BridgeAssist contracts\\n * @dev Creates BridgeAssists using the openzeppelin/Clones library\\n */\\ncontract BridgeFactoryUpgradeable is AccessControlUpgradeable {\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    enum BridgeType {\\n        TRANSFER,\\n        MINT,\\n        NATIVE\\n    }\\n\\n    struct BridgeAssistInfo {\\n        address bridgeAssist;\\n        address token;\\n    }\\n\\n    bytes32 public constant CREATOR_ROLE = keccak256('CREATOR_ROLE');\\n    uint256 public constant ADD_REMOVE_LIMIT_PER_TIME = 100;\\n\\n    mapping(BridgeType => address) public bridgeAssistImplementation;\\n\\n    EnumerableSetUpgradeable.AddressSet private _createdBridges;\\n    mapping(address => EnumerableSetUpgradeable.AddressSet) private _bridgesByToken;\\n\\n    event BridgeAssistCreated(address indexed bridgeAssist, address indexed token);\\n    event BridgeAssistAdded(address indexed bridgeAssist, address indexed token);\\n    event BridgeAssistRemoved(address indexed bridgeAssist, address indexed token);\\n    event BridgeAssistImplementationsSet(\\n        address indexed bridgeTransfer,\\n        address indexed bridgeMint,\\n        address indexed bridgeNative\\n    );\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @notice Initializes the BridgeFactory contract.\\n     * @param bridgeAssistTransferImplementation_ BridgeAssistTransfer implementation\\n     * @param bridgeAssistNativeImplementation_ BridgeAssistNative implementation\\n     * @param bridgeAssistMintImplementation_ BridgeAssistMint implementation\\n     * @param owner DEFAULT_ADMIN_ROLE holder\\n     */\\n    function initialize(\\n        address bridgeAssistTransferImplementation_,\\n        address bridgeAssistMintImplementation_,\\n        address bridgeAssistNativeImplementation_,\\n        address owner\\n    ) external initializer {\\n        require(owner != address(0), 'Owner: zero address');\\n        if (bridgeAssistTransferImplementation_ != address(0)) {\\n            bridgeAssistImplementation[\\n                BridgeType.TRANSFER\\n            ] = bridgeAssistTransferImplementation_;\\n        }\\n        if (bridgeAssistMintImplementation_ != address(0)) {\\n            bridgeAssistImplementation[BridgeType.MINT] = bridgeAssistMintImplementation_;\\n        }\\n        if (bridgeAssistNativeImplementation_ != address(0)) {\\n            bridgeAssistImplementation[\\n                BridgeType.NATIVE\\n            ] = bridgeAssistNativeImplementation_;\\n        }\\n        _grantRole(DEFAULT_ADMIN_ROLE, owner);\\n    }\\n\\n    /**\\n     * @notice Creates new BridgeAssist contract\\n     * @param bridgeType 0 - MINT, 1 - NATIVE\\n     * @param token Supported token to send (not used if NATIVE)\\n     * @param limitPerSend Limit per one send (not used if NATIVE)\\n     * @param feeWallet Platform fee wallet\\n     * @param feeSend Fee numerator (send) (not used if NATIVE)\\n     * @param feeFulfill Fee numerator (fulfill)\\n     * @param owner Bridge DEFAULT_ADMIN_ROLE holder\\n     * @param relayers Backend signers\\n     * @param relayerConsensusThreshold Number of signers required\\n     * to complete a transaction\\n     */\\n    function createBridgeAssist(\\n        BridgeType bridgeType,\\n        address token,\\n        uint256 limitPerSend,\\n        address feeWallet,\\n        uint256 feeSend,\\n        uint256 feeFulfill,\\n        address owner,\\n        address[] memory relayers,\\n        uint256 relayerConsensusThreshold\\n    ) external onlyRole(CREATOR_ROLE) returns (address bridge) {\\n        address implementation = bridgeAssistImplementation[bridgeType];\\n        require(implementation != address(0), 'BR_TYPE_INVALID_IMPL');\\n\\n        bridge = ClonesUpgradeable.clone(implementation);\\n        IBridgeAssist(bridge).initialize(\\n            token,\\n            limitPerSend,\\n            feeWallet,\\n            feeSend,\\n            feeFulfill,\\n            owner,\\n            relayers,\\n            relayerConsensusThreshold\\n        );\\n\\n        _createdBridges.add(bridge);\\n        _bridgesByToken[token].add(bridge);\\n\\n        emit BridgeAssistCreated(bridge, token);\\n    }\\n\\n    /**\\n     * @notice Allows to add third-party bridges to the stored list\\n     * @dev Third-party bridges interface must match the implementation bridge\\n     * @param bridges Bridge addresses to add\\n     */\\n    function addBridgeAssists(address[] memory bridges)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        uint256 length = bridges.length;\\n        require(length != 0, 'Zero length array');\\n        require(length <= ADD_REMOVE_LIMIT_PER_TIME, 'Array length exceeds limit');\\n\\n        for (uint256 i = 0; i < length; ) {\\n            if (bridges[i] == address(0)) {\\n                revert(\\n                    string.concat(\\n                        'Bridge zero address at index: ',\\n                        StringsUpgradeable.toString(i)\\n                    )\\n                );\\n            }\\n            if (!_createdBridges.add(bridges[i])) {\\n                revert(\\n                    string.concat(\\n                        'Bridge duplicate at index: ',\\n                        StringsUpgradeable.toString(i)\\n                    )\\n                );\\n            }\\n\\n            address token = IBridgeAssist(bridges[i]).TOKEN();\\n            if (token == address(0)) {\\n                revert(\\n                    string.concat(\\n                        'Token zero address at index: ',\\n                        StringsUpgradeable.toString(i)\\n                    )\\n                );\\n            }\\n            _bridgesByToken[token].add(bridges[i]);\\n\\n            emit BridgeAssistAdded(bridges[i], token);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows to remove bridges from the stored list\\n     * @param bridges Bridge addresses to remove\\n     */\\n    function removeBridgeAssists(address[] memory bridges)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        uint256 length = bridges.length;\\n        require(length != 0, 'Zero length array');\\n        require(length <= ADD_REMOVE_LIMIT_PER_TIME, 'Array length exceeds limit');\\n\\n        for (uint256 i = 0; i < length; ) {\\n            if (!_createdBridges.remove(bridges[i])) {\\n                revert(\\n                    string.concat(\\n                        'Bridge not found at index: ',\\n                        StringsUpgradeable.toString(i)\\n                    )\\n                );\\n            }\\n\\n            address token = IBridgeAssist(bridges[i]).TOKEN();\\n            _bridgesByToken[token].remove(bridges[i]);\\n\\n            emit BridgeAssistRemoved(bridges[i], token);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows to change template for creating new bridges\\n     * @dev Changes the implementation address for future proxy bridges\\n     * @param bridgeAssistTransferImplementation_ New transfer bridge implementaion address\\n     * @param bridgeAssistMintImplementation_ New mint bridge implementaion address\\n     * @param bridgeAssistNativeImplementation_ New native bridge implementaion address\\n     */\\n    function changeBridgeAssistImplementation(\\n        address bridgeAssistTransferImplementation_,\\n        address bridgeAssistMintImplementation_,\\n        address bridgeAssistNativeImplementation_\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(\\n            bridgeAssistTransferImplementation_ !=\\n                bridgeAssistImplementation[BridgeType.TRANSFER] ||\\n                bridgeAssistMintImplementation_ !=\\n                bridgeAssistImplementation[BridgeType.MINT] ||\\n                bridgeAssistNativeImplementation_ !=\\n                bridgeAssistImplementation[BridgeType.NATIVE],\\n            'Duplicate implementations'\\n        );\\n\\n        bridgeAssistImplementation[\\n            BridgeType.TRANSFER\\n        ] = bridgeAssistTransferImplementation_;\\n        bridgeAssistImplementation[BridgeType.MINT] = bridgeAssistMintImplementation_;\\n        bridgeAssistImplementation[BridgeType.NATIVE] = bridgeAssistNativeImplementation_;\\n\\n        emit BridgeAssistImplementationsSet(\\n            bridgeAssistTransferImplementation_,\\n            bridgeAssistMintImplementation_,\\n            bridgeAssistNativeImplementation_\\n        );\\n    }\\n\\n    /**\\n     * @notice Gets created bridges info\\n     * @param offset Offset to start with\\n     * @param limit Return size limit\\n     *\\n     * Requirements:\\n     * {offset} + {limit} must be less than or equal to {getCreatedBridgesLength}.\\n     */\\n    function getCreatedBridgesInfo(uint256 offset, uint256 limit)\\n        external\\n        view\\n        returns (BridgeAssistInfo[] memory)\\n    {\\n        require(limit != 0, 'Limit: zero');\\n        require(offset + limit <= _createdBridges.length(), 'Invalid offset-limit');\\n\\n        BridgeAssistInfo[] memory bridgesInfo = new BridgeAssistInfo[](limit);\\n\\n        for (uint256 i = 0; i < limit; ) {\\n            address bridge = _createdBridges.at(i + offset);\\n            bridgesInfo[i] = BridgeAssistInfo({\\n                bridgeAssist: bridge,\\n                token: IBridgeAssist(bridge).TOKEN()\\n            });\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return bridgesInfo;\\n    }\\n\\n    /**\\n     * @notice Gets created bridge info by index\\n     * @param index Bridge index to get\\n     *\\n     * Requirements:\\n     * {index} must be less than {getCreatedBridgesLength}.\\n     */\\n    function getCreatedBridgeInfo(uint256 index)\\n        external\\n        view\\n        returns (BridgeAssistInfo memory)\\n    {\\n        require(index < _createdBridges.length(), 'Invalid index');\\n\\n        address bridge = _createdBridges.at(index);\\n        return\\n            BridgeAssistInfo({\\n                bridgeAssist: bridge,\\n                token: IBridgeAssist(bridge).TOKEN()\\n            });\\n    }\\n\\n    /**\\n     * @notice Gets list of bridge addresses by token address\\n     * @param token Token address\\n     * @param offset Offset to start with\\n     * @param limit Return size limit\\n     *\\n     * Requirements:\\n     * {offset} + {limit} must be less than or equal to {getBridgesByTokenLength}.\\n     */\\n    function getBridgesByToken(\\n        address token,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view returns (address[] memory) {\\n        require(_bridgesByToken[token].length() != 0, 'No bridges by this token');\\n        require(limit != 0, 'Limit: zero');\\n        require(\\n            offset + limit <= _bridgesByToken[token].length(),\\n            'Invalid offset-limit'\\n        );\\n\\n        address[] memory bridges = new address[](limit);\\n\\n        for (uint256 i = 0; i < limit; ) {\\n            bridges[i] = _bridgesByToken[token].at(i + offset);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return bridges;\\n    }\\n\\n    /**\\n     * @notice Gets bridge address by token address\\n     * @param token Token address\\n     * @param index Bridge index to get\\n     *\\n     * Requirements:\\n     * {index} must be less than or equal to {getBridgesByTokenLength}.\\n     */\\n    function getBridgeByToken(address token, uint256 index)\\n        external\\n        view\\n        returns (address)\\n    {\\n        require(_bridgesByToken[token].length() != 0, 'No bridges by this token');\\n        require(index < _bridgesByToken[token].length(), 'Invalid index');\\n\\n        return _bridgesByToken[token].at(index);\\n    }\\n\\n    /**\\n     * @notice Gets the number of created bridges\\n     */\\n    function getCreatedBridgesLength() external view returns (uint256) {\\n        return _createdBridges.length();\\n    }\\n\\n    /**\\n     * @notice Gets the number of created bridges for the specified token\\n     * @param token Token address\\n     */\\n    function getBridgesByTokenLength(address token) external view returns (uint256) {\\n        return _bridgesByToken[token].length();\\n    }\\n}\\n\",\"keccak256\":\"0xbf569a49ee42e44ef85e4c95631d3a8115936b5555d08e82ad3b812a66edec64\",\"license\":\"MIT\"},\"contracts/interfaces/IBridgeAssist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IBridgeAssist\\n * @author gotbit\\n * @notice Part of the BridgeAssist contract interface\\n */\\ninterface IBridgeAssist {\\n    function initialize(\\n        address token_,\\n        uint256 limitPerSend_,\\n        address feeWallet_,\\n        uint256 feeSend_,\\n        uint256 feeFulfill_,\\n        address owner,\\n        address[] memory relayers_,\\n        uint256 relayerConsensusThreshold_\\n    ) external;\\n\\n    function TOKEN() external view returns (address);\\n}\\n\",\"keccak256\":\"0xf70b8306f9c6528a3795868d77767aea89f1133b17e535f5f8fd03aea74d9437\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001961001e565b6100dd565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116146100db576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61237880620000ed6000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c8063a217fddf116100b8578063d547741f1161007c578063d547741f146102df578063db04fbef146102f2578063ecf103e0146102fa578063f5aa45ee1461030d578063f8c8765e14610315578063ff8d07601461032857600080fd5b8063a217fddf14610250578063a919262314610258578063b286027814610283578063b7109c3714610296578063bc8a6dab146102b657600080fd5b806341a712c4116100ff57806341a712c4146101d05780638aeda25a146101e357806391d148541461020a5780639c96a2491461021d5780639e6cbec71461023057600080fd5b806301ffc9a71461013c57806309399b3014610164578063248a9ca3146101795780632f2ff15d146101aa57806336568abe146101bd575b600080fd5b61014f61014a366004611bc2565b610348565b60405190151581526020015b60405180910390f35b610177610172366004611c0c565b61037f565b005b61019c610187366004611c57565b60009081526065602052604090206001015490565b60405190815260200161015b565b6101776101b8366004611c70565b610570565b6101776101cb366004611c70565b61059a565b6101776101de366004611d58565b610618565b61019c7f828634d95e775031b9ff576b159a8509d3053581a8c9c4d7d86899e0afcd882f81565b61014f610218366004611c70565b6108e1565b61019c61022b366004611d95565b61090c565b61024361023e366004611c57565b61092d565b60405161015b9190611db2565b61019c600081565b61026b610266366004611de5565b610a26565b6040516001600160a01b03909116815260200161015b565b61026b610291366004611e92565b610bda565b6102a96102a4366004611ebe565b610ccd565b60405161015b9190611f37565b61026b6102c4366004611f4a565b6097602052600090815260409020546001600160a01b031681565b6101776102ed366004611c70565b610ea1565b61019c606481565b610177610308366004611d58565b610ec6565b61019c6110f0565b610177610323366004611f65565b611101565b61033b610336366004611fc1565b611360565b60405161015b9190611fe3565b60006001600160e01b03198216637965db0b60e01b148061037957506301ffc9a760e01b6001600160e01b03198316145b92915050565b600061038a81611536565b6000805260976020527f683723e34a772b6e4f2c919bba7fa32ed8ea11a8325f54da7db716e9d9dd98c7546001600160a01b0385811691161415806104065750600160005260976020527f53bdca72fa8d2e145a1b3bd11cde5bd75428acd18eac3d6adf4e06e7e637706d546001600160a01b03848116911614155b806104485750600260005260976020527fd6ca216b3b8b63bcc0099d5c8294d1780d598ac9b3a29b15c3c3e68c85f6e30c546001600160a01b03838116911614155b6104995760405162461bcd60e51b815260206004820152601960248201527f4475706c696361746520696d706c656d656e746174696f6e730000000000000060448201526064015b60405180910390fd5b60976020527f683723e34a772b6e4f2c919bba7fa32ed8ea11a8325f54da7db716e9d9dd98c780546001600160a01b03199081166001600160a01b038781169182179093557f53bdca72fa8d2e145a1b3bd11cde5bd75428acd18eac3d6adf4e06e7e637706d80548316878516908117909155600260009081527fd6ca216b3b8b63bcc0099d5c8294d1780d598ac9b3a29b15c3c3e68c85f6e30c805495881695909416851790935560405190927f1fba076c61ddcf861cdc37f3e0b2f6e9305275300216bf81cbd9033e05f328ca91a450505050565b60008281526065602052604090206001015461058b81611536565b6105958383611543565b505050565b6001600160a01b038116331461060a5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610490565b61061482826115c9565b5050565b600061062381611536565b8151600081900361066a5760405162461bcd60e51b81526020600482015260116024820152705a65726f206c656e67746820617272617960781b6044820152606401610490565b60648111156106bb5760405162461bcd60e51b815260206004820152601a60248201527f4172726179206c656e6774682065786365656473206c696d69740000000000006044820152606401610490565b60005b818110156108db5760006001600160a01b03168482815181106106e3576106e361205c565b60200260200101516001600160a01b0316036107385761070281611630565b6040516020016107129190612096565b60408051601f198184030181529082905262461bcd60e51b8252610490916004016120db565b61076584828151811061074d5761074d61205c565b602002602001015160986116c390919063ffffffff16565b6107825761077281611630565b604051602001610712919061210e565b60008482815181106107965761079661205c565b60200260200101516001600160a01b03166382bfefc86040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ff9190612153565b90506001600160a01b0381166108285761081882611630565b6040516020016107129190612170565b61087885838151811061083d5761083d61205c565b6020026020010151609a6000846001600160a01b03166001600160a01b031681526020019081526020016000206116c390919063ffffffff16565b50806001600160a01b03168583815181106108955761089561205c565b60200260200101516001600160a01b03167f7e47dab8afa7341cd3e835154f5aa693e96117bd5545f06c075601c0559e069760405160405180910390a3506001016106be565b50505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6001600160a01b0381166000908152609a60205260408120610379906116d8565b604080518082019091526000808252602082015261094b60986116d8565b82106109895760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b6044820152606401610490565b60006109966098846116e2565b90506040518060400160405280826001600160a01b03168152602001826001600160a01b03166382bfefc86040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a149190612153565b6001600160a01b031690529392505050565b60007f828634d95e775031b9ff576b159a8509d3053581a8c9c4d7d86899e0afcd882f610a5281611536565b6000609760008d6002811115610a6a57610a6a612046565b6002811115610a7b57610a7b612046565b81526020810191909152604001600020546001600160a01b0316905080610adb5760405162461bcd60e51b8152602060048201526014602482015273109497d516541157d253959053125117d253541360621b6044820152606401610490565b610ae4816116ee565b604051633406c17560e11b81529093506001600160a01b0384169063680d82ea90610b21908e908e908e908e908e908e908e908e906004016121b5565b600060405180830381600087803b158015610b3b57600080fd5b505af1158015610b4f573d6000803e3d6000fd5b50505050610b678360986116c390919063ffffffff16565b506001600160a01b038b166000908152609a60205260409020610b8a90846116c3565b508a6001600160a01b0316836001600160a01b03167fd9cba6538dbfc3bc2cfefe73c785f6a1a4c50e780195c79d86688d8f6a6da23460405160405180910390a350509998505050505050505050565b6001600160a01b0382166000908152609a60205260408120610bfb906116d8565b600003610c455760405162461bcd60e51b8152602060048201526018602482015277273790313934b233b2b990313c903a3434b9903a37b5b2b760411b6044820152606401610490565b6001600160a01b0383166000908152609a60205260409020610c66906116d8565b8210610ca45760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b6044820152606401610490565b6001600160a01b0383166000908152609a60205260409020610cc690836116e2565b9392505050565b6001600160a01b0383166000908152609a60205260409020606090610cf1906116d8565b600003610d3b5760405162461bcd60e51b8152602060048201526018602482015277273790313934b233b2b990313c903a3434b9903a37b5b2b760411b6044820152606401610490565b81600003610d795760405162461bcd60e51b815260206004820152600b60248201526a4c696d69743a207a65726f60a81b6044820152606401610490565b6001600160a01b0384166000908152609a60205260409020610d9a906116d8565b610da4838561222b565b1115610de95760405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a59081bd9999cd95d0b5b1a5b5a5d60621b6044820152606401610490565b60008267ffffffffffffffff811115610e0457610e04611ca0565b604051908082528060200260200182016040528015610e2d578160200160208202803683370190505b50905060005b83811015610e9857610e66610e48868361222b565b6001600160a01b0388166000908152609a60205260409020906116e2565b828281518110610e7857610e7861205c565b6001600160a01b0390921660209283029190910190910152600101610e33565b50949350505050565b600082815260656020526040902060010154610ebc81611536565b61059583836115c9565b6000610ed181611536565b81516000819003610f185760405162461bcd60e51b81526020600482015260116024820152705a65726f206c656e67746820617272617960781b6044820152606401610490565b6064811115610f695760405162461bcd60e51b815260206004820152601a60248201527f4172726179206c656e6774682065786365656473206c696d69740000000000006044820152606401610490565b60005b818110156108db57610fa1848281518110610f8957610f8961205c565b6020026020010151609861178890919063ffffffff16565b610fbe57610fae81611630565b604051602001610712919061223e565b6000848281518110610fd257610fd261205c565b60200260200101516001600160a01b03166382bfefc86040518163ffffffff1660e01b8152600401602060405180830381865afa158015611017573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103b9190612153565b905061108d8583815181106110525761105261205c565b6020026020010151609a6000846001600160a01b03166001600160a01b0316815260200190815260200160002061178890919063ffffffff16565b50806001600160a01b03168583815181106110aa576110aa61205c565b60200260200101516001600160a01b03167f2615a9e874c601a8e854f4d4e70c6f9834de146d18f20aa54ae12c69c37a2ff760405160405180910390a350600101610f6c565b60006110fc60986116d8565b905090565b600054610100900460ff16158080156111215750600054600160ff909116105b8061113b5750303b15801561113b575060005460ff166001145b61119e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610490565b6000805460ff1916600117905580156111c1576000805461ff0019166101001790555b6001600160a01b03821661120d5760405162461bcd60e51b81526020600482015260136024820152724f776e65723a207a65726f206164647265737360681b6044820152606401610490565b6001600160a01b03851615611260576000805260976020527f683723e34a772b6e4f2c919bba7fa32ed8ea11a8325f54da7db716e9d9dd98c780546001600160a01b0319166001600160a01b0387161790555b6001600160a01b038416156112b457600160005260976020527f53bdca72fa8d2e145a1b3bd11cde5bd75428acd18eac3d6adf4e06e7e637706d80546001600160a01b0319166001600160a01b0386161790555b6001600160a01b0383161561130857600260005260976020527fd6ca216b3b8b63bcc0099d5c8294d1780d598ac9b3a29b15c3c3e68c85f6e30c80546001600160a01b0319166001600160a01b0385161790555b611313600083611543565b8015611359576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6060816000036113a05760405162461bcd60e51b815260206004820152600b60248201526a4c696d69743a207a65726f60a81b6044820152606401610490565b6113aa60986116d8565b6113b4838561222b565b11156113f95760405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a59081bd9999cd95d0b5b1a5b5a5d60621b6044820152606401610490565b60008267ffffffffffffffff81111561141457611414611ca0565b60405190808252806020026020018201604052801561145957816020015b60408051808201909152600080825260208201528152602001906001900390816114325790505b50905060005b8381101561152e57600061147e611476878461222b565b6098906116e2565b90506040518060400160405280826001600160a01b03168152602001826001600160a01b03166382bfefc86040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fc9190612153565b6001600160a01b031681525083838151811061151a5761151a61205c565b60209081029190910101525060010161145f565b509392505050565b611540813361179d565b50565b61154d82826108e1565b6106145760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556115853390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6115d382826108e1565b156106145760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6060600061163d836117d0565b600101905060008167ffffffffffffffff81111561165d5761165d611ca0565b6040519080825280601f01601f191660200182016040528015611687576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461169157509392505050565b6000610cc6836001600160a01b0384166118a8565b6000610379825490565b6000610cc683836118f7565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b0381166117835760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b6044820152606401610490565b919050565b6000610cc6836001600160a01b038416611921565b6117a782826108e1565b610614576117b481611a14565b6117bf836020611a26565b604051602001610712929190612276565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b831061180f5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef8100000000831061183b576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061185957662386f26fc10000830492506010015b6305f5e1008310611871576305f5e100830492506008015b612710831061188557612710830492506004015b60648310611897576064830492506002015b600a83106103795760010192915050565b60008181526001830160205260408120546118ef57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610379565b506000610379565b600082600001828154811061190e5761190e61205c565b9060005260206000200154905092915050565b60008181526001830160205260408120548015611a0a5760006119456001836122eb565b8554909150600090611959906001906122eb565b90508181146119be5760008660000182815481106119795761197961205c565b906000526020600020015490508087600001848154811061199c5761199c61205c565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806119cf576119cf6122fe565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610379565b6000915050610379565b60606103796001600160a01b03831660145b60606000611a35836002612314565b611a4090600261222b565b67ffffffffffffffff811115611a5857611a58611ca0565b6040519080825280601f01601f191660200182016040528015611a82576020820181803683370190505b509050600360fc1b81600081518110611a9d57611a9d61205c565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611acc57611acc61205c565b60200101906001600160f81b031916908160001a9053506000611af0846002612314565b611afb90600161222b565b90505b6001811115611b73576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611b2f57611b2f61205c565b1a60f81b828281518110611b4557611b4561205c565b60200101906001600160f81b031916908160001a90535060049490941c93611b6c8161232b565b9050611afe565b508315610cc65760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610490565b600060208284031215611bd457600080fd5b81356001600160e01b031981168114610cc657600080fd5b6001600160a01b038116811461154057600080fd5b803561178381611bec565b600080600060608486031215611c2157600080fd5b8335611c2c81611bec565b92506020840135611c3c81611bec565b91506040840135611c4c81611bec565b809150509250925092565b600060208284031215611c6957600080fd5b5035919050565b60008060408385031215611c8357600080fd5b823591506020830135611c9581611bec565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112611cc757600080fd5b8135602067ffffffffffffffff80831115611ce457611ce4611ca0565b8260051b604051601f19603f83011681018181108482111715611d0957611d09611ca0565b604052938452858101830193838101925087851115611d2757600080fd5b83870191505b84821015611d4d57611d3e82611c01565b83529183019190830190611d2d565b979650505050505050565b600060208284031215611d6a57600080fd5b813567ffffffffffffffff811115611d8157600080fd5b611d8d84828501611cb6565b949350505050565b600060208284031215611da757600080fd5b8135610cc681611bec565b60408101610379828480516001600160a01b03908116835260209182015116910152565b80356003811061178357600080fd5b60008060008060008060008060006101208a8c031215611e0457600080fd5b611e0d8a611dd6565b985060208a0135611e1d81611bec565b975060408a0135965060608a0135611e3481611bec565b955060808a0135945060a08a0135935060c08a0135611e5281611bec565b925060e08a013567ffffffffffffffff811115611e6e57600080fd5b611e7a8c828d01611cb6565b9250506101008a013590509295985092959850929598565b60008060408385031215611ea557600080fd5b8235611eb081611bec565b946020939093013593505050565b600080600060608486031215611ed357600080fd5b8335611ede81611bec565b95602085013595506040909401359392505050565b600081518084526020808501945080840160005b83811015611f2c5781516001600160a01b031687529582019590820190600101611f07565b509495945050505050565b602081526000610cc66020830184611ef3565b600060208284031215611f5c57600080fd5b610cc682611dd6565b60008060008060808587031215611f7b57600080fd5b8435611f8681611bec565b93506020850135611f9681611bec565b92506040850135611fa681611bec565b91506060850135611fb681611bec565b939692955090935050565b60008060408385031215611fd457600080fd5b50508035926020909101359150565b602080825282518282018190526000919060409081850190868401855b828110156120395761202984835180516001600160a01b03908116835260209182015116910152565b9284019290850190600101612000565b5091979650505050505050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60005b8381101561208d578181015183820152602001612075565b50506000910152565b7f427269646765207a65726f206164647265737320617420696e6465783a2000008152600082516120ce81601e850160208701612072565b91909101601e0192915050565b60208152600082518060208401526120fa816040850160208701612072565b601f01601f19169190910160400192915050565b7f427269646765206475706c696361746520617420696e6465783a20000000000081526000825161214681601b850160208701612072565b91909101601b0192915050565b60006020828403121561216557600080fd5b8151610cc681611bec565b7f546f6b656e207a65726f206164647265737320617420696e6465783a200000008152600082516121a881601d850160208701612072565b91909101601d0192915050565b6001600160a01b0389811682526020820189905287811660408301526060820187905260808201869052841660a082015261010060c082018190526000906121ff83820186611ef3565b9150508260e08301529998505050505050505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561037957610379612215565b7f427269646765206e6f7420666f756e6420617420696e6465783a20000000000081526000825161214681601b850160208701612072565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516122ae816017850160208801612072565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516122df816028840160208801612072565b01602801949350505050565b8181038181111561037957610379612215565b634e487b7160e01b600052603160045260246000fd5b808202811582820484141761037957610379612215565b60008161233a5761233a612215565b50600019019056fea2646970667358221220018a7b9dc3595c1ddd3a33bd10fa75b4cb074ba9c3f21c5a375a9e165fd5e12d64736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c8063a217fddf116100b8578063d547741f1161007c578063d547741f146102df578063db04fbef146102f2578063ecf103e0146102fa578063f5aa45ee1461030d578063f8c8765e14610315578063ff8d07601461032857600080fd5b8063a217fddf14610250578063a919262314610258578063b286027814610283578063b7109c3714610296578063bc8a6dab146102b657600080fd5b806341a712c4116100ff57806341a712c4146101d05780638aeda25a146101e357806391d148541461020a5780639c96a2491461021d5780639e6cbec71461023057600080fd5b806301ffc9a71461013c57806309399b3014610164578063248a9ca3146101795780632f2ff15d146101aa57806336568abe146101bd575b600080fd5b61014f61014a366004611bc2565b610348565b60405190151581526020015b60405180910390f35b610177610172366004611c0c565b61037f565b005b61019c610187366004611c57565b60009081526065602052604090206001015490565b60405190815260200161015b565b6101776101b8366004611c70565b610570565b6101776101cb366004611c70565b61059a565b6101776101de366004611d58565b610618565b61019c7f828634d95e775031b9ff576b159a8509d3053581a8c9c4d7d86899e0afcd882f81565b61014f610218366004611c70565b6108e1565b61019c61022b366004611d95565b61090c565b61024361023e366004611c57565b61092d565b60405161015b9190611db2565b61019c600081565b61026b610266366004611de5565b610a26565b6040516001600160a01b03909116815260200161015b565b61026b610291366004611e92565b610bda565b6102a96102a4366004611ebe565b610ccd565b60405161015b9190611f37565b61026b6102c4366004611f4a565b6097602052600090815260409020546001600160a01b031681565b6101776102ed366004611c70565b610ea1565b61019c606481565b610177610308366004611d58565b610ec6565b61019c6110f0565b610177610323366004611f65565b611101565b61033b610336366004611fc1565b611360565b60405161015b9190611fe3565b60006001600160e01b03198216637965db0b60e01b148061037957506301ffc9a760e01b6001600160e01b03198316145b92915050565b600061038a81611536565b6000805260976020527f683723e34a772b6e4f2c919bba7fa32ed8ea11a8325f54da7db716e9d9dd98c7546001600160a01b0385811691161415806104065750600160005260976020527f53bdca72fa8d2e145a1b3bd11cde5bd75428acd18eac3d6adf4e06e7e637706d546001600160a01b03848116911614155b806104485750600260005260976020527fd6ca216b3b8b63bcc0099d5c8294d1780d598ac9b3a29b15c3c3e68c85f6e30c546001600160a01b03838116911614155b6104995760405162461bcd60e51b815260206004820152601960248201527f4475706c696361746520696d706c656d656e746174696f6e730000000000000060448201526064015b60405180910390fd5b60976020527f683723e34a772b6e4f2c919bba7fa32ed8ea11a8325f54da7db716e9d9dd98c780546001600160a01b03199081166001600160a01b038781169182179093557f53bdca72fa8d2e145a1b3bd11cde5bd75428acd18eac3d6adf4e06e7e637706d80548316878516908117909155600260009081527fd6ca216b3b8b63bcc0099d5c8294d1780d598ac9b3a29b15c3c3e68c85f6e30c805495881695909416851790935560405190927f1fba076c61ddcf861cdc37f3e0b2f6e9305275300216bf81cbd9033e05f328ca91a450505050565b60008281526065602052604090206001015461058b81611536565b6105958383611543565b505050565b6001600160a01b038116331461060a5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610490565b61061482826115c9565b5050565b600061062381611536565b8151600081900361066a5760405162461bcd60e51b81526020600482015260116024820152705a65726f206c656e67746820617272617960781b6044820152606401610490565b60648111156106bb5760405162461bcd60e51b815260206004820152601a60248201527f4172726179206c656e6774682065786365656473206c696d69740000000000006044820152606401610490565b60005b818110156108db5760006001600160a01b03168482815181106106e3576106e361205c565b60200260200101516001600160a01b0316036107385761070281611630565b6040516020016107129190612096565b60408051601f198184030181529082905262461bcd60e51b8252610490916004016120db565b61076584828151811061074d5761074d61205c565b602002602001015160986116c390919063ffffffff16565b6107825761077281611630565b604051602001610712919061210e565b60008482815181106107965761079661205c565b60200260200101516001600160a01b03166382bfefc86040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ff9190612153565b90506001600160a01b0381166108285761081882611630565b6040516020016107129190612170565b61087885838151811061083d5761083d61205c565b6020026020010151609a6000846001600160a01b03166001600160a01b031681526020019081526020016000206116c390919063ffffffff16565b50806001600160a01b03168583815181106108955761089561205c565b60200260200101516001600160a01b03167f7e47dab8afa7341cd3e835154f5aa693e96117bd5545f06c075601c0559e069760405160405180910390a3506001016106be565b50505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6001600160a01b0381166000908152609a60205260408120610379906116d8565b604080518082019091526000808252602082015261094b60986116d8565b82106109895760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b6044820152606401610490565b60006109966098846116e2565b90506040518060400160405280826001600160a01b03168152602001826001600160a01b03166382bfefc86040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a149190612153565b6001600160a01b031690529392505050565b60007f828634d95e775031b9ff576b159a8509d3053581a8c9c4d7d86899e0afcd882f610a5281611536565b6000609760008d6002811115610a6a57610a6a612046565b6002811115610a7b57610a7b612046565b81526020810191909152604001600020546001600160a01b0316905080610adb5760405162461bcd60e51b8152602060048201526014602482015273109497d516541157d253959053125117d253541360621b6044820152606401610490565b610ae4816116ee565b604051633406c17560e11b81529093506001600160a01b0384169063680d82ea90610b21908e908e908e908e908e908e908e908e906004016121b5565b600060405180830381600087803b158015610b3b57600080fd5b505af1158015610b4f573d6000803e3d6000fd5b50505050610b678360986116c390919063ffffffff16565b506001600160a01b038b166000908152609a60205260409020610b8a90846116c3565b508a6001600160a01b0316836001600160a01b03167fd9cba6538dbfc3bc2cfefe73c785f6a1a4c50e780195c79d86688d8f6a6da23460405160405180910390a350509998505050505050505050565b6001600160a01b0382166000908152609a60205260408120610bfb906116d8565b600003610c455760405162461bcd60e51b8152602060048201526018602482015277273790313934b233b2b990313c903a3434b9903a37b5b2b760411b6044820152606401610490565b6001600160a01b0383166000908152609a60205260409020610c66906116d8565b8210610ca45760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b6044820152606401610490565b6001600160a01b0383166000908152609a60205260409020610cc690836116e2565b9392505050565b6001600160a01b0383166000908152609a60205260409020606090610cf1906116d8565b600003610d3b5760405162461bcd60e51b8152602060048201526018602482015277273790313934b233b2b990313c903a3434b9903a37b5b2b760411b6044820152606401610490565b81600003610d795760405162461bcd60e51b815260206004820152600b60248201526a4c696d69743a207a65726f60a81b6044820152606401610490565b6001600160a01b0384166000908152609a60205260409020610d9a906116d8565b610da4838561222b565b1115610de95760405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a59081bd9999cd95d0b5b1a5b5a5d60621b6044820152606401610490565b60008267ffffffffffffffff811115610e0457610e04611ca0565b604051908082528060200260200182016040528015610e2d578160200160208202803683370190505b50905060005b83811015610e9857610e66610e48868361222b565b6001600160a01b0388166000908152609a60205260409020906116e2565b828281518110610e7857610e7861205c565b6001600160a01b0390921660209283029190910190910152600101610e33565b50949350505050565b600082815260656020526040902060010154610ebc81611536565b61059583836115c9565b6000610ed181611536565b81516000819003610f185760405162461bcd60e51b81526020600482015260116024820152705a65726f206c656e67746820617272617960781b6044820152606401610490565b6064811115610f695760405162461bcd60e51b815260206004820152601a60248201527f4172726179206c656e6774682065786365656473206c696d69740000000000006044820152606401610490565b60005b818110156108db57610fa1848281518110610f8957610f8961205c565b6020026020010151609861178890919063ffffffff16565b610fbe57610fae81611630565b604051602001610712919061223e565b6000848281518110610fd257610fd261205c565b60200260200101516001600160a01b03166382bfefc86040518163ffffffff1660e01b8152600401602060405180830381865afa158015611017573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103b9190612153565b905061108d8583815181106110525761105261205c565b6020026020010151609a6000846001600160a01b03166001600160a01b0316815260200190815260200160002061178890919063ffffffff16565b50806001600160a01b03168583815181106110aa576110aa61205c565b60200260200101516001600160a01b03167f2615a9e874c601a8e854f4d4e70c6f9834de146d18f20aa54ae12c69c37a2ff760405160405180910390a350600101610f6c565b60006110fc60986116d8565b905090565b600054610100900460ff16158080156111215750600054600160ff909116105b8061113b5750303b15801561113b575060005460ff166001145b61119e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610490565b6000805460ff1916600117905580156111c1576000805461ff0019166101001790555b6001600160a01b03821661120d5760405162461bcd60e51b81526020600482015260136024820152724f776e65723a207a65726f206164647265737360681b6044820152606401610490565b6001600160a01b03851615611260576000805260976020527f683723e34a772b6e4f2c919bba7fa32ed8ea11a8325f54da7db716e9d9dd98c780546001600160a01b0319166001600160a01b0387161790555b6001600160a01b038416156112b457600160005260976020527f53bdca72fa8d2e145a1b3bd11cde5bd75428acd18eac3d6adf4e06e7e637706d80546001600160a01b0319166001600160a01b0386161790555b6001600160a01b0383161561130857600260005260976020527fd6ca216b3b8b63bcc0099d5c8294d1780d598ac9b3a29b15c3c3e68c85f6e30c80546001600160a01b0319166001600160a01b0385161790555b611313600083611543565b8015611359576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6060816000036113a05760405162461bcd60e51b815260206004820152600b60248201526a4c696d69743a207a65726f60a81b6044820152606401610490565b6113aa60986116d8565b6113b4838561222b565b11156113f95760405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a59081bd9999cd95d0b5b1a5b5a5d60621b6044820152606401610490565b60008267ffffffffffffffff81111561141457611414611ca0565b60405190808252806020026020018201604052801561145957816020015b60408051808201909152600080825260208201528152602001906001900390816114325790505b50905060005b8381101561152e57600061147e611476878461222b565b6098906116e2565b90506040518060400160405280826001600160a01b03168152602001826001600160a01b03166382bfefc86040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fc9190612153565b6001600160a01b031681525083838151811061151a5761151a61205c565b60209081029190910101525060010161145f565b509392505050565b611540813361179d565b50565b61154d82826108e1565b6106145760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556115853390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6115d382826108e1565b156106145760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6060600061163d836117d0565b600101905060008167ffffffffffffffff81111561165d5761165d611ca0565b6040519080825280601f01601f191660200182016040528015611687576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461169157509392505050565b6000610cc6836001600160a01b0384166118a8565b6000610379825490565b6000610cc683836118f7565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b0381166117835760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b6044820152606401610490565b919050565b6000610cc6836001600160a01b038416611921565b6117a782826108e1565b610614576117b481611a14565b6117bf836020611a26565b604051602001610712929190612276565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b831061180f5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef8100000000831061183b576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061185957662386f26fc10000830492506010015b6305f5e1008310611871576305f5e100830492506008015b612710831061188557612710830492506004015b60648310611897576064830492506002015b600a83106103795760010192915050565b60008181526001830160205260408120546118ef57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610379565b506000610379565b600082600001828154811061190e5761190e61205c565b9060005260206000200154905092915050565b60008181526001830160205260408120548015611a0a5760006119456001836122eb565b8554909150600090611959906001906122eb565b90508181146119be5760008660000182815481106119795761197961205c565b906000526020600020015490508087600001848154811061199c5761199c61205c565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806119cf576119cf6122fe565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610379565b6000915050610379565b60606103796001600160a01b03831660145b60606000611a35836002612314565b611a4090600261222b565b67ffffffffffffffff811115611a5857611a58611ca0565b6040519080825280601f01601f191660200182016040528015611a82576020820181803683370190505b509050600360fc1b81600081518110611a9d57611a9d61205c565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611acc57611acc61205c565b60200101906001600160f81b031916908160001a9053506000611af0846002612314565b611afb90600161222b565b90505b6001811115611b73576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611b2f57611b2f61205c565b1a60f81b828281518110611b4557611b4561205c565b60200101906001600160f81b031916908160001a90535060049490941c93611b6c8161232b565b9050611afe565b508315610cc65760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610490565b600060208284031215611bd457600080fd5b81356001600160e01b031981168114610cc657600080fd5b6001600160a01b038116811461154057600080fd5b803561178381611bec565b600080600060608486031215611c2157600080fd5b8335611c2c81611bec565b92506020840135611c3c81611bec565b91506040840135611c4c81611bec565b809150509250925092565b600060208284031215611c6957600080fd5b5035919050565b60008060408385031215611c8357600080fd5b823591506020830135611c9581611bec565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112611cc757600080fd5b8135602067ffffffffffffffff80831115611ce457611ce4611ca0565b8260051b604051601f19603f83011681018181108482111715611d0957611d09611ca0565b604052938452858101830193838101925087851115611d2757600080fd5b83870191505b84821015611d4d57611d3e82611c01565b83529183019190830190611d2d565b979650505050505050565b600060208284031215611d6a57600080fd5b813567ffffffffffffffff811115611d8157600080fd5b611d8d84828501611cb6565b949350505050565b600060208284031215611da757600080fd5b8135610cc681611bec565b60408101610379828480516001600160a01b03908116835260209182015116910152565b80356003811061178357600080fd5b60008060008060008060008060006101208a8c031215611e0457600080fd5b611e0d8a611dd6565b985060208a0135611e1d81611bec565b975060408a0135965060608a0135611e3481611bec565b955060808a0135945060a08a0135935060c08a0135611e5281611bec565b925060e08a013567ffffffffffffffff811115611e6e57600080fd5b611e7a8c828d01611cb6565b9250506101008a013590509295985092959850929598565b60008060408385031215611ea557600080fd5b8235611eb081611bec565b946020939093013593505050565b600080600060608486031215611ed357600080fd5b8335611ede81611bec565b95602085013595506040909401359392505050565b600081518084526020808501945080840160005b83811015611f2c5781516001600160a01b031687529582019590820190600101611f07565b509495945050505050565b602081526000610cc66020830184611ef3565b600060208284031215611f5c57600080fd5b610cc682611dd6565b60008060008060808587031215611f7b57600080fd5b8435611f8681611bec565b93506020850135611f9681611bec565b92506040850135611fa681611bec565b91506060850135611fb681611bec565b939692955090935050565b60008060408385031215611fd457600080fd5b50508035926020909101359150565b602080825282518282018190526000919060409081850190868401855b828110156120395761202984835180516001600160a01b03908116835260209182015116910152565b9284019290850190600101612000565b5091979650505050505050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60005b8381101561208d578181015183820152602001612075565b50506000910152565b7f427269646765207a65726f206164647265737320617420696e6465783a2000008152600082516120ce81601e850160208701612072565b91909101601e0192915050565b60208152600082518060208401526120fa816040850160208701612072565b601f01601f19169190910160400192915050565b7f427269646765206475706c696361746520617420696e6465783a20000000000081526000825161214681601b850160208701612072565b91909101601b0192915050565b60006020828403121561216557600080fd5b8151610cc681611bec565b7f546f6b656e207a65726f206164647265737320617420696e6465783a200000008152600082516121a881601d850160208701612072565b91909101601d0192915050565b6001600160a01b0389811682526020820189905287811660408301526060820187905260808201869052841660a082015261010060c082018190526000906121ff83820186611ef3565b9150508260e08301529998505050505050505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561037957610379612215565b7f427269646765206e6f7420666f756e6420617420696e6465783a20000000000081526000825161214681601b850160208701612072565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516122ae816017850160208801612072565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516122df816028840160208801612072565b01602801949350505050565b8181038181111561037957610379612215565b634e487b7160e01b600052603160045260246000fd5b808202811582820484141761037957610379612215565b60008161233a5761233a612215565b50600019019056fea2646970667358221220018a7b9dc3595c1ddd3a33bd10fa75b4cb074ba9c3f21c5a375a9e165fd5e12d64736f6c63430008120033",
  "devdoc": {
    "author": "gotbit",
    "details": "Creates BridgeAssists using the openzeppelin/Clones library",
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "addBridgeAssists(address[])": {
        "details": "Third-party bridges interface must match the implementation bridge",
        "params": {
          "bridges": "Bridge addresses to add"
        }
      },
      "changeBridgeAssistImplementation(address,address,address)": {
        "details": "Changes the implementation address for future proxy bridges",
        "params": {
          "bridgeAssistMintImplementation_": "New mint bridge implementaion address",
          "bridgeAssistNativeImplementation_": "New native bridge implementaion address",
          "bridgeAssistTransferImplementation_": "New transfer bridge implementaion address"
        }
      },
      "createBridgeAssist(uint8,address,uint256,address,uint256,uint256,address,address[],uint256)": {
        "params": {
          "bridgeType": "0 - MINT, 1 - NATIVE",
          "feeFulfill": "Fee numerator (fulfill)",
          "feeSend": "Fee numerator (send) (not used if NATIVE)",
          "feeWallet": "Platform fee wallet",
          "limitPerSend": "Limit per one send (not used if NATIVE)",
          "owner": "Bridge DEFAULT_ADMIN_ROLE holder",
          "relayerConsensusThreshold": "Number of signers required to complete a transaction",
          "relayers": "Backend signers",
          "token": "Supported token to send (not used if NATIVE)"
        }
      },
      "getBridgeByToken(address,uint256)": {
        "params": {
          "index": "Bridge index to get Requirements: {index} must be less than or equal to {getBridgesByTokenLength}.",
          "token": "Token address"
        }
      },
      "getBridgesByToken(address,uint256,uint256)": {
        "params": {
          "limit": "Return size limit Requirements: {offset} + {limit} must be less than or equal to {getBridgesByTokenLength}.",
          "offset": "Offset to start with",
          "token": "Token address"
        }
      },
      "getBridgesByTokenLength(address)": {
        "params": {
          "token": "Token address"
        }
      },
      "getCreatedBridgeInfo(uint256)": {
        "params": {
          "index": "Bridge index to get Requirements: {index} must be less than {getCreatedBridgesLength}."
        }
      },
      "getCreatedBridgesInfo(uint256,uint256)": {
        "params": {
          "limit": "Return size limit Requirements: {offset} + {limit} must be less than or equal to {getCreatedBridgesLength}.",
          "offset": "Offset to start with"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,address,address,address)": {
        "params": {
          "bridgeAssistMintImplementation_": "BridgeAssistMint implementation",
          "bridgeAssistNativeImplementation_": "BridgeAssistNative implementation",
          "bridgeAssistTransferImplementation_": "BridgeAssistTransfer implementation",
          "owner": "DEFAULT_ADMIN_ROLE holder"
        }
      },
      "removeBridgeAssists(address[])": {
        "params": {
          "bridges": "Bridge addresses to remove"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "title": "BridgeFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addBridgeAssists(address[])": {
        "notice": "Allows to add third-party bridges to the stored list"
      },
      "changeBridgeAssistImplementation(address,address,address)": {
        "notice": "Allows to change template for creating new bridges"
      },
      "createBridgeAssist(uint8,address,uint256,address,uint256,uint256,address,address[],uint256)": {
        "notice": "Creates new BridgeAssist contract"
      },
      "getBridgeByToken(address,uint256)": {
        "notice": "Gets bridge address by token address"
      },
      "getBridgesByToken(address,uint256,uint256)": {
        "notice": "Gets list of bridge addresses by token address"
      },
      "getBridgesByTokenLength(address)": {
        "notice": "Gets the number of created bridges for the specified token"
      },
      "getCreatedBridgeInfo(uint256)": {
        "notice": "Gets created bridge info by index"
      },
      "getCreatedBridgesInfo(uint256,uint256)": {
        "notice": "Gets created bridges info"
      },
      "getCreatedBridgesLength()": {
        "notice": "Gets the number of created bridges"
      },
      "initialize(address,address,address,address)": {
        "notice": "Initializes the BridgeFactory contract."
      },
      "removeBridgeAssists(address[])": {
        "notice": "Allows to remove bridges from the stored list"
      }
    },
    "notice": "Contract for creating BridgeAssist contracts",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 521,
        "contract": "contracts/BridgeFactoryUpgradeable.sol:BridgeFactoryUpgradeable",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 524,
        "contract": "contracts/BridgeFactoryUpgradeable.sol:BridgeFactoryUpgradeable",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1681,
        "contract": "contracts/BridgeFactoryUpgradeable.sol:BridgeFactoryUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2606,
        "contract": "contracts/BridgeFactoryUpgradeable.sol:BridgeFactoryUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 28,
        "contract": "contracts/BridgeFactoryUpgradeable.sol:BridgeFactoryUpgradeable",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)23_storage)"
      },
      {
        "astId": 335,
        "contract": "contracts/BridgeFactoryUpgradeable.sol:BridgeFactoryUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8973,
        "contract": "contracts/BridgeFactoryUpgradeable.sol:BridgeFactoryUpgradeable",
        "label": "bridgeAssistImplementation",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_enum(BridgeType)8955,t_address)"
      },
      {
        "astId": 8976,
        "contract": "contracts/BridgeFactoryUpgradeable.sol:BridgeFactoryUpgradeable",
        "label": "_createdBridges",
        "offset": 0,
        "slot": "152",
        "type": "t_struct(AddressSet)3916_storage"
      },
      {
        "astId": 8981,
        "contract": "contracts/BridgeFactoryUpgradeable.sol:BridgeFactoryUpgradeable",
        "label": "_bridgesByToken",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_address,t_struct(AddressSet)3916_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(BridgeType)8955": {
        "encoding": "inplace",
        "label": "enum BridgeFactoryUpgradeable.BridgeType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(AddressSet)3916_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)3916_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)23_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)23_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(BridgeType)8955,t_address)": {
        "encoding": "mapping",
        "key": "t_enum(BridgeType)8955",
        "label": "mapping(enum BridgeFactoryUpgradeable.BridgeType => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(AddressSet)3916_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 3915,
            "contract": "contracts/BridgeFactoryUpgradeable.sol:BridgeFactoryUpgradeable",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3601_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)23_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 20,
            "contract": "contracts/BridgeFactoryUpgradeable.sol:BridgeFactoryUpgradeable",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 22,
            "contract": "contracts/BridgeFactoryUpgradeable.sol:BridgeFactoryUpgradeable",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3601_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 3596,
            "contract": "contracts/BridgeFactoryUpgradeable.sol:BridgeFactoryUpgradeable",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3600,
            "contract": "contracts/BridgeFactoryUpgradeable.sol:BridgeFactoryUpgradeable",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}