/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Staking, StakingInterface } from "../Staking";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getUserStakes",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "reward",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "stakes",
    outputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "startTimestamp",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "staking",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "unstake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "userStakes",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610aa6380380610aa683398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610a13806100936000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063a9fb763c1161005b578063a9fb763c146100d3578063b5d5b5fa146100f4578063d5a44f8614610107578063fc0c546a1461014c57600080fd5b80632e17de7814610082578063842e298114610097578063a694fc3a146100c0575b600080fd5b610095610090366004610808565b610177565b005b6100aa6100a536600461083d565b610277565b6040516100b79190610858565b60405180910390f35b6100956100ce366004610808565b6102e3565b6100e66100e1366004610808565b61043f565b6040519081526020016100b7565b6100e661010236600461089c565b610489565b61011a610115366004610808565b6104ba565b604080519586526001600160a01b0390941660208601529284019190915260608301521515608082015260a0016100b7565b60005461015f906001600160a01b031681565b6040516001600160a01b0390911681526020016100b7565b336001600160a01b031660018281548110610194576101946108c6565b60009182526020909120600160059092020101546001600160a01b0316146101bb57600080fd5b600181815481106101ce576101ce6108c6565b600091825260209091206004600590920201015460ff166101ee57600080fd5b61023d336101fb8361043f565b6001848154811061020e5761020e6108c6565b90600052602060002090600502016002015461022a91906108f2565b6000546001600160a01b03169190610508565b600060018281548110610252576102526108c6565b60009182526020909120600590910201600401805460ff191691151591909117905550565b6001600160a01b0381166000908152600260209081526040918290208054835181840281018401909452808452606093928301828280156102d757602002820191906000526020600020905b8154815260200190600101908083116102c3575b50505050509050919050565b6000546102fb906001600160a01b0316333084610570565b600180546040805160a0810182528281523360208083018281528385019788524260608501908152608085018881528789018955600089815295517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf660058a029081019190915592517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf7840180546001600160a01b0319166001600160a01b0390921691909117905598517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf8830155517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf982015596517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cfa909701805460ff191697151597909717909655815260028552908120805493840181558152929092200155565b600060018281548110610454576104546108c6565b90600052602060002090600502016003015442610471919061090a565b61048390670de0b6b3a7640000610921565b92915050565b600260205281600052604060002081815481106104a557600080fd5b90600052602060002001600091509150505481565b600181815481106104ca57600080fd5b6000918252602090912060059091020180546001820154600283015460038401546004909401549294506001600160a01b0390911692909160ff1685565b6040516001600160a01b03831660248201526044810182905261056b90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526105ae565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526105a89085906323b872dd60e01b90608401610534565b50505050565b6000610603826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166106859092919063ffffffff16565b80519091501561056b57808060200190518101906106219190610940565b61056b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084015b60405180910390fd5b6060610694848460008561069e565b90505b9392505050565b6060824710156106ff5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161067c565b6001600160a01b0385163b6107565760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161067c565b600080866001600160a01b03168587604051610772919061098e565b60006040518083038185875af1925050503d80600081146107af576040519150601f19603f3d011682016040523d82523d6000602084013e6107b4565b606091505b50915091506107c48282866107cf565b979650505050505050565b606083156107de575081610697565b8251156107ee5782518084602001fd5b8160405162461bcd60e51b815260040161067c91906109aa565b60006020828403121561081a57600080fd5b5035919050565b80356001600160a01b038116811461083857600080fd5b919050565b60006020828403121561084f57600080fd5b61069782610821565b6020808252825182820181905260009190848201906040850190845b8181101561089057835183529284019291840191600101610874565b50909695505050505050565b600080604083850312156108af57600080fd5b6108b883610821565b946020939093013593505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115610905576109056108dc565b500190565b60008282101561091c5761091c6108dc565b500390565b600081600019048311821515161561093b5761093b6108dc565b500290565b60006020828403121561095257600080fd5b8151801515811461069757600080fd5b60005b8381101561097d578181015183820152602001610965565b838111156105a85750506000910152565b600082516109a0818460208701610962565b9190910192915050565b60208152600082518060208401526109c9816040850160208701610962565b601f01601f1916919091016040019291505056fea26469706673582212207ab981b9c4384f3a3ceb8a88bbec5983ea86481ac38b755de4644843b8aaa22c64736f6c634300080f0033";

export class Staking__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    token_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Staking> {
    return super.deploy(token_, overrides || {}) as Promise<Staking>;
  }
  getDeployTransaction(
    token_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(token_, overrides || {});
  }
  attach(address: string): Staking {
    return super.attach(address) as Staking;
  }
  connect(signer: Signer): Staking__factory {
    return super.connect(signer) as Staking__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingInterface {
    return new utils.Interface(_abi) as StakingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Staking {
    return new Contract(address, _abi, signerOrProvider) as Staking;
  }
}
