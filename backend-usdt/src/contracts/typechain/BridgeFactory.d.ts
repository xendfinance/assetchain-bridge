/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface BridgeFactoryInterface extends ethers.utils.Interface {
  functions: {
    "ADD_REMOVE_LIMIT_PER_TIME()": FunctionFragment;
    "CREATOR_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "addBridgeAssists(address[])": FunctionFragment;
    "bridgeAssistImplementation()": FunctionFragment;
    "changeBridgeAssistImplementation(address)": FunctionFragment;
    "createBridgeAssist(address,uint256,address,uint256,uint256,address,address[],uint256)": FunctionFragment;
    "getBridgeByToken(address,uint256)": FunctionFragment;
    "getBridgesByToken(address,uint256,uint256)": FunctionFragment;
    "getBridgesByTokenLength(address)": FunctionFragment;
    "getCreatedBridgeInfo(uint256)": FunctionFragment;
    "getCreatedBridgesInfo(uint256,uint256)": FunctionFragment;
    "getCreatedBridgesLength()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "removeBridgeAssists(address[])": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ADD_REMOVE_LIMIT_PER_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CREATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addBridgeAssists",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeAssistImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeBridgeAssistImplementation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createBridgeAssist",
    values: [
      string,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      string,
      string[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBridgeByToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBridgesByToken",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBridgesByTokenLength",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatedBridgeInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatedBridgesInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatedBridgesLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeBridgeAssists",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "ADD_REMOVE_LIMIT_PER_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CREATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addBridgeAssists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeAssistImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeBridgeAssistImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBridgeAssist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBridgeByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBridgesByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBridgesByTokenLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatedBridgeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatedBridgesInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatedBridgesLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeBridgeAssists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {
    "BridgeAssistAdded(address,address)": EventFragment;
    "BridgeAssistCreated(address,address)": EventFragment;
    "BridgeAssistRemoved(address,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BridgeAssistAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BridgeAssistCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BridgeAssistRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export type BridgeAssistAddedEvent = TypedEvent<
  [string, string] & { bridgeAssist: string; token: string }
>;

export type BridgeAssistCreatedEvent = TypedEvent<
  [string, string] & { bridgeAssist: string; token: string }
>;

export type BridgeAssistRemovedEvent = TypedEvent<
  [string, string] & { bridgeAssist: string; token: string }
>;

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string] & {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export class BridgeFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BridgeFactoryInterface;

  functions: {
    ADD_REMOVE_LIMIT_PER_TIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    CREATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addBridgeAssists(
      bridges: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bridgeAssistImplementation(overrides?: CallOverrides): Promise<[string]>;

    changeBridgeAssistImplementation(
      bridgeAssistImplementation_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createBridgeAssist(
      token: string,
      limitPerSend: BigNumberish,
      feeWallet: string,
      feeSend: BigNumberish,
      feeFulfill: BigNumberish,
      owner: string,
      relayers: string[],
      relayerConsensusThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBridgeByToken(
      token: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getBridgesByToken(
      token: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getBridgesByTokenLength(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCreatedBridgeInfo(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[string, string] & { bridgeAssist: string; token: string }]>;

    getCreatedBridgesInfo(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [([string, string] & { bridgeAssist: string; token: string })[]]
    >;

    getCreatedBridgesLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      bridgeAssistImplementation_: string,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeBridgeAssists(
      bridges: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  ADD_REMOVE_LIMIT_PER_TIME(overrides?: CallOverrides): Promise<BigNumber>;

  CREATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  addBridgeAssists(
    bridges: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bridgeAssistImplementation(overrides?: CallOverrides): Promise<string>;

  changeBridgeAssistImplementation(
    bridgeAssistImplementation_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createBridgeAssist(
    token: string,
    limitPerSend: BigNumberish,
    feeWallet: string,
    feeSend: BigNumberish,
    feeFulfill: BigNumberish,
    owner: string,
    relayers: string[],
    relayerConsensusThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBridgeByToken(
    token: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getBridgesByToken(
    token: string,
    offset: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getBridgesByTokenLength(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCreatedBridgeInfo(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string] & { bridgeAssist: string; token: string }>;

  getCreatedBridgesInfo(
    offset: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<([string, string] & { bridgeAssist: string; token: string })[]>;

  getCreatedBridgesLength(overrides?: CallOverrides): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    bridgeAssistImplementation_: string,
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeBridgeAssists(
    bridges: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    ADD_REMOVE_LIMIT_PER_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    CREATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    addBridgeAssists(
      bridges: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    bridgeAssistImplementation(overrides?: CallOverrides): Promise<string>;

    changeBridgeAssistImplementation(
      bridgeAssistImplementation_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createBridgeAssist(
      token: string,
      limitPerSend: BigNumberish,
      feeWallet: string,
      feeSend: BigNumberish,
      feeFulfill: BigNumberish,
      owner: string,
      relayers: string[],
      relayerConsensusThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getBridgeByToken(
      token: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getBridgesByToken(
      token: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getBridgesByTokenLength(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreatedBridgeInfo(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { bridgeAssist: string; token: string }>;

    getCreatedBridgesInfo(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<([string, string] & { bridgeAssist: string; token: string })[]>;

    getCreatedBridgesLength(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      bridgeAssistImplementation_: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeBridgeAssists(
      bridges: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "BridgeAssistAdded(address,address)"(
      bridgeAssist?: string | null,
      token?: string | null
    ): TypedEventFilter<
      [string, string],
      { bridgeAssist: string; token: string }
    >;

    BridgeAssistAdded(
      bridgeAssist?: string | null,
      token?: string | null
    ): TypedEventFilter<
      [string, string],
      { bridgeAssist: string; token: string }
    >;

    "BridgeAssistCreated(address,address)"(
      bridgeAssist?: string | null,
      token?: string | null
    ): TypedEventFilter<
      [string, string],
      { bridgeAssist: string; token: string }
    >;

    BridgeAssistCreated(
      bridgeAssist?: string | null,
      token?: string | null
    ): TypedEventFilter<
      [string, string],
      { bridgeAssist: string; token: string }
    >;

    "BridgeAssistRemoved(address,address)"(
      bridgeAssist?: string | null,
      token?: string | null
    ): TypedEventFilter<
      [string, string],
      { bridgeAssist: string; token: string }
    >;

    BridgeAssistRemoved(
      bridgeAssist?: string | null,
      token?: string | null
    ): TypedEventFilter<
      [string, string],
      { bridgeAssist: string; token: string }
    >;

    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;
  };

  estimateGas: {
    ADD_REMOVE_LIMIT_PER_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    CREATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addBridgeAssists(
      bridges: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bridgeAssistImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    changeBridgeAssistImplementation(
      bridgeAssistImplementation_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createBridgeAssist(
      token: string,
      limitPerSend: BigNumberish,
      feeWallet: string,
      feeSend: BigNumberish,
      feeFulfill: BigNumberish,
      owner: string,
      relayers: string[],
      relayerConsensusThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBridgeByToken(
      token: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBridgesByToken(
      token: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBridgesByTokenLength(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreatedBridgeInfo(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreatedBridgesInfo(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreatedBridgesLength(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      bridgeAssistImplementation_: string,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeBridgeAssists(
      bridges: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADD_REMOVE_LIMIT_PER_TIME(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CREATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addBridgeAssists(
      bridges: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bridgeAssistImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeBridgeAssistImplementation(
      bridgeAssistImplementation_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createBridgeAssist(
      token: string,
      limitPerSend: BigNumberish,
      feeWallet: string,
      feeSend: BigNumberish,
      feeFulfill: BigNumberish,
      owner: string,
      relayers: string[],
      relayerConsensusThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBridgeByToken(
      token: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBridgesByToken(
      token: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBridgesByTokenLength(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreatedBridgeInfo(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreatedBridgesInfo(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreatedBridgesLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      bridgeAssistImplementation_: string,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeBridgeAssists(
      bridges: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
